{"version":3,"sources":["Components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","input","setInput","name","setName","weathers","setWeather","condition","setCondition","loading","setLoading","error","setError","searches","setSearches","url","iconUrl","handleClick","a","axios","get","response","data","slice","main","weather","icon","console","log","useEffect","trim","length","searchOptions","document","getElementById","options","children","remove","innerHTML","Form","Row","className","Col","sm","Label","htmlFor","visuallyHidden","InputGroup","Text","FormControl","id","list","placeholder","onChange","event","target","value","xs","Button","onClick","role","src","alt","width","height","temp","feels_like","temp_min","temp_max","humidity","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.df34b4ab.chunk.js","sourcesContent":["import '../Css/Weather.css';\r\nimport React, { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport { Col, Row, Form } from \"react-bootstrap\";\r\n\r\nfunction Weather() {\r\n    const [input, setInput] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [weathers, setWeather] = useState([])\r\n    const [condition, setCondition] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [searches, setSearches] = useState([])\r\n\r\n    var url = 'https://api.openweathermap.org/data/2.5/weather?q=' + input + '&units=metric&appid=50edd61f4ff2018c56342ffa46223816'\r\n    var iconUrl = '';\r\n\r\n    const handleClick = async () => {\r\n        try {\r\n            setName('');\r\n            setLoading(true);\r\n            setError(false);\r\n            const response = await axios.get(url);\r\n            if (response && response.data) {\r\n                setSearches(searches => [input, ...searches].slice(0, 5));\r\n                setWeather(response.data.main);\r\n                setName(response.data.name);\r\n                setCondition(response.data.weather);\r\n                setLoading(false);\r\n\r\n                iconUrl = 'http://openweathermap.org/img/wn/' + condition[0].icon + '@4x.png'\r\n            }\r\n        } catch (err) {\r\n            console.log(err.response.data);\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        //do when searches changes\r\n        if (input.trim().length > 0) {\r\n            var searchOptions = document.getElementById(\"dataList\");\r\n            if (searchOptions.options.length > 2) {\r\n                searchOptions.children[0].remove()\r\n            }\r\n            searchOptions.innerHTML += '<option value=\"' + input + '\"></option>';\r\n        }\r\n    }, [searches])\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <Form>\r\n                    <Row className=\"d-flex justify-content-center\">\r\n                        <Col sm={5} className=\"my-1\">\r\n                            <Form.Label htmlFor=\"inlineFormInputGroupUsername\" visuallyHidden>\r\n                                City\r\n                            </Form.Label>\r\n                            <InputGroup>\r\n                                <InputGroup.Text>City</InputGroup.Text>\r\n                                <FormControl id=\"inlineFormInputGroupUsername\" list=\"dataList\" placeholder=\"City\" onChange={(event) => setInput(event.target.value)} />\r\n                                <datalist id=\"dataList\"></datalist>\r\n                            </InputGroup>\r\n                        </Col>\r\n                        <Col xs=\"auto\" className=\"my-1\">\r\n                            <Button onClick={handleClick}>Get Weather</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </div>\r\n            <div>\r\n                <h2>{name}</h2>\r\n            </div>\r\n            <div>\r\n                {(() => {\r\n                    if (loading) {\r\n                        if (error) {\r\n                            return (\r\n                                <div className=\"alert alert-danger\" role=\"alert\"> Wrong city </div>\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                <div className=\"alert alert-warning\" role=\"alert\">\r\n                                    <div className=\"spinner-border text-warning\" role=\"status\">  </div>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    } else {\r\n                        return (\r\n                            <div>\r\n                                <div>\r\n                                    <img src={iconUrl} alt=\"weather image\" width=\"150\" height=\"150\" />{condition[0].main}\r\n                                </div>\r\n                                <table className=\"styled-table\">\r\n                                    <tbody className=\"content\">\r\n                                        <tr>\r\n                                            <td>Current temperature</td>\r\n                                            <td>Feels like</td>\r\n                                            <td>Min temperature</td>\r\n                                            <td>Max temperature</td>\r\n                                            <td>Humidity</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>{weathers.temp}째C</td>\r\n                                            <td>{weathers.feels_like}째C</td>\r\n                                            <td>{weathers.temp_min}째C</td>\r\n                                            <td>{weathers.temp_max}째C</td>\r\n                                            <td>{weathers.humidity}%</td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n                        )\r\n                    }\r\n                })()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n","import './App.css';\nimport Weather from './Components/Weather';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}